#!/usr/bin/env bash
# Author: Michael Abreu
# Version: 0.5.0
#
#   Variable Schema
#   
#   _ALL_CAPS_VARIABLE_NAME     = Private global scope variable (Don't change these values)
#   ALL_CAPS_VARIABLE_NAME      = Global scope variables
#   lower_case_variable_name    = Local scope variable or function
#========================================================
#   Configurable Variables
#========================================================
declare DEBUG=false
declare VERBOSE=false
#========================================================
#   Global Variables
#========================================================
declare REQUIRE_BASH_4_4=false
declare INSTALL_DEPENDENCIES=true
declare PROFILE_FILENAME="${PROFILE_FILENAME:-"example_profiles/default.json"}"
declare DOTFILES="${HOME}/dotfiles"
#========================================================
#   Imports
#========================================================
declare -a DEPENDENCIES=(
    "./lib/lib-core.sh"
    "./lib/lib-installers.sh"
    "./lib/lib-configs.sh"
)
for dependency in ${DEPENDENCIES[@]};do
[[ -r "$dependency" ]] && { source "$dependency" || 
     {  echo "FATAL ERROR: The file $(basename $0) couldn't load the file, $dependency"; exit 1; }
} || {  echo "FATAL ERROR: The file $(basename $0) couldn't read the file, $dependency"; exit 1; }
done
#========================================================
#   Help Message
#========================================================
function help_message {
    display_bar
    display_message """
    ${CTEAL}dotfiles${CE} - Mike Abreu
    This program will configure your terminal environment.
    """
    display_message """
    Options:
    -h                          Display this help message.
    -p \"path/to/profile\"        Load a profile from json file.
    -d                          Debug messaging
    -v                          Enable verbose messaging.
    """
    display_message """
    Examples: (Assuming dotfiles can be called from PATH. Use ./dotfiles otherwise)
    ${CTEAL}dotfiles${CE}
    ${CTEAL}dotfiles${CE} -p example_profiles/default.json
    ${CTEAL}dotfiles${CE} -v -p example_profiles/default.json
    """
}
function introduction_message {
    display_bar
    display_message """
    dotfiles - Mike Abreu
    This project aims to separate logic from configuration files.
    """
    display_message """
    The goal is to quickly install and configure a terminal environment using the dotfiles bash script. 
    You can keep your configuration files separate of the dotfiles script and simply link to them in your profile. 
    Profiles allow different configurations easily using the dotfiles script.
    """
    display_bar
}
#========================================================
#   Arguments
#========================================================
function handle_arguments {
    # Arg: -p "path/to/profile.json" | Load profile
    # Arg: -h | Help Message
    # Arg: -d | Debug messaging
    # Arg: -v | Enable Verbose
    # Arg: -s | Skip installing dependencies (Hidden)
    while getopts ":p:htsdvm" opt;do
        case $opt in
            p)  PROFILE_FILENAME="$OPTARG" ;;
            h)  help_message && display_bar && exit 1 ;;
            s)  INSTALL_DEPENDENCIES=false ;;
            d)  DEBUG=true ;;
            v)  VERBOSE=true ;;
            \?) display_error "Invalid option: -$OPTARG. Exiting." >&2; exit 1 ;;
            :)  display_error "Option -$OPTARG requires an argument. Exiting." >&2; exit 1 ;;
        esac
    done
}
#========================================================
#   Main Function
#========================================================
function main {
    # Handle Arguments
    handle_arguments "$@"
    declare REQUIRE_PRIVILEGE=true
    [[ $VERBOSE == true ]] && local verbose_arg="-v"
    [[ $DEBUG == true ]] && local debug_arg="-d"
    if [[ $INSTALL_DEPENDENCIES == true ]];then
        # Introduction Message
        introduction_message
        display_info "OPERATING_SYSTEM:" "\t\t${OPERATING_SYSTEM}"
        display_info "OPERATING_SYSTEM_VERSION:" "\t${OPERATING_SYSTEM_VERSION}"
        display_info "PROFILE_FILENAME:" "\t\t${PROFILE_FILENAME}"
        # Prompt user for program execution.
        display_warning "This program will install packages and change your terminal configuration."
        display_prompt "Do you wish to continue with the program [Y/n]: "
        # Do manual user prompt because we haven't installed bash 4.4+ on macOS yet
        read user_response
        user_response=${user_response:-"Y"}
        case $user_response in
            [yY][eE][sS]    |[yY]) display_info     "Continuing with program execution." ;;
            [nN][oO]        |[nN]) display_error    "User exited the program."; exit 1 ;;
            *) display_error "Invalid option. Exiting." && exit 1 ;;
        esac
        ! $IS_PRIVILEGED && display_info "Determining user privileges and sudo access." && check_privileges
        # Install dependencies for dotfiles to operate
        display_bar
        display_title "Installing dotfile dependencies"
        [[ $OPERATING_SYSTEM == 'Darwin' ]] && {
            install_brew
            install_brew_bash
            install_brew_coreutils
        }
        display_bar
        install_system_package "jq"
        display_bar
        install_system_package "stow"
        display_bar
        install_system_package "tmux"
        display_bar
        install_system_package "git"
        display_bar
    fi
    # The below check is for fresh installs using bash lower than 4.4.
    ! check_bash_version && {
        # Attempting to restart bash shell to load 4.4+ bash
        display_warning "Bash 4.4 is required, attempting to restart to use new bash version from installing dependencies."
        ./dotfiles $verbose_arg $debug_arg -sp ${PROFILE_FILENAME}
        exit 0
    }
    # Loaded here because it requires bash 4.4+
    [[ -r "lib/lib-configs.sh" ]] && { source "lib/lib-configs.sh" || { 
            echo "DOTFILES: Failed to load lib-configs.sh, run with debug true for details"; exit 1; }
    } || {  echo "DOTFILES: Missing lib-configs.sh, run with debug true for details"; exit 1; }
    # Check if privileged. Needed incase we skipped all the code above due to flags.
    ! $IS_PRIVILEGED && display_info "Determining user privileges and sudo access." && check_privileges
    # Load the profile and display to user before continuing
    load_profile "$PROFILE_FILENAME"
    # Install and configure the profile to the system
    install_profile "$PROFILE_FILENAME"
    display_success "All done setting up the terminal. There might be manual actions to perform with your profile. You'll want to double check this."
    display_warning "Recommended: Start a new terminal instead of continuing from the installation one."
    $(which ${DOTFILES_PROFILE[SHELL]})
}
#========================================================
#   Main Execution
#========================================================
main "$@"
