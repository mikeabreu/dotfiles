#!/usr/bin/env bash
# Author: Michael Abreu
# Version: 0.5.0
#
#   Variable Schema
#   
#   _ALL_CAPS_VARIABLE_NAME     = Private global scope variable (Don't change these values)
#   ALL_CAPS_VARIABLE_NAME      = Global scope variables
#   lower_case_variable_name    = Local scope variable
#========================================================
#   Configurable Variables
#========================================================
declare MAC_RESTART=true
declare CREATE_TMUX_SESSION=false
declare DEBUG=false
declare VERBOSE=false
#========================================================
#   Global Variables
#========================================================
declare REQUIRE_BASH_4_4=false
declare INSTALL_DEPENDENCIES=true
declare PROFILE_FILENAME="${PROFILE_FILENAME:-"example_profiles/default.json"}"
declare DOTFILES="${HOME}/dotfiles"
declare DOTFILES_LOGS="${DOTFILES}/_logs" && LIBCORE_LOGS="$DOTFILES_LOGS"
#========================================================
#   Imports
#========================================================
declare -a DEPENDENCIES=(
    "./lib/lib-core.sh"
    "./lib/lib-installers.sh"
)
for dependency in ${DEPENDENCIES[@]};do
[[ -r "$dependency" ]] && { source "$dependency" || 
     {  echo "FATAL ERROR: The file $(basename $0) couldn't load the file, $dependency"; exit 1; }
} || {  echo "FATAL ERROR: The file $(basename $0) couldn't read the file, $dependency"; exit 1; }
done
#========================================================
#   Help Message
#========================================================
function help_message {
    display_bar
    display_message """
    dotfiles - Mike Abreu
    This program will configure your terminal environment and maintain it.

    Options:
    -h                          Display this help message.
    -p \"path/to/profile\"        Load a profile from json file.
    -t                          Skip creating and attaching to a tmux session.
    -s                          Skip installing dotfile dependencies.
    -d                          Debug messaging
    -v                          Enable verbose messaging.

    Examples: (Assuming dotfiles can be called from PATH. Use ./dotfiles otherwise)
    dotfiles
    dotfiles -vt
    dotfiles -p profiles/default.json
    dotfiles -vtdp profiles/default.json
    dotfiles -v -t -d -p profiles/default.json
    """
}
function introduction_message {
    display_bar
    display_message """
    dotfiles - Mike Abreu
    This program will configure your terminal environment and attempt to maintain it.
    """
    display_message """
    This program aims to separate logic to quickly install and configure a terminal environment
    from the configuration files themselves. This allows for private storage of configuration files
    without having to maintain software to quickly install and configure those configuration files.
    """
    display_message """
    Use a profile to select exactly which configuration files and software is 
    installed and configured. The program focuses on home and etc config files.
    """
    display_bar
}
#========================================================
#   Arguments
#========================================================
function handle_arguments {
    # Arg: -p "path/to/profile.json" | Load profile
    # Arg: -h | Help Message
    # Arg: -t | Skip attaching to tmux
    # Arg: -s | Skip installing dependencies
    # Arg: -d | Debug messaging
    # Arg: -v | Enable Verbose
    # Arg: -m | Skip relaunching bash on macOS
    while getopts ":p:htsdvm" opt;do
        case $opt in
            p)  PROFILE_FILENAME="$OPTARG" ;;
            h)  help_message && display_bar && exit 1 ;;
            t)  CREATE_TMUX_SESSION=true ;;
            s)  INSTALL_DEPENDENCIES=false ;;
            d)  DEBUG=true ;;
            v)  VERBOSE=true ;;
            m)  MAC_RESTART=false ;;
            \?) display_error "Invalid option: -$OPTARG. Exiting." >&2; exit 1 ;;
            :)  display_error "Option -$OPTARG requires an argument. Exiting." >&2; exit 1 ;;
        esac
    done
}
#========================================================
#   Main Function
#========================================================
function main {
    # Handle Arguments
    handle_arguments "$@"
    declare REQUIRE_PRIVILEGE=true
    [[ $VERBOSE == true ]] && local verbose_arg="-v"
    [[ $DEBUG == true ]] && local debug_arg="-d"
    if [[ $INSTALL_DEPENDENCIES == true ]];then
        # Introduction Message
        introduction_message
        display_info "OPERATING_SYSTEM:" "\t\t${OPERATING_SYSTEM}"
        display_info "OPERATING_SYSTEM_VERSION:" "\t${OPERATING_SYSTEM_VERSION}"
        display_info "PROFILE_FILENAME:" "\t\t${PROFILE_FILENAME}"
        # Prompt user for program execution.
        display_warning "This program will install packages and change your terminal configuration."
        display_prompt "Do you wish to continue with the program [Y/n]: "
        # Do manual user prompt because we haven't installed bash 4.4+ on macOS yet
        read user_response
        user_response=${user_response:-"Y"}
        case $user_response in
            [yY][eE][sS]    |[yY]) display_info     "Continuing with program execution." ;;
            [nN][oO]        |[nN]) display_error    "User exited the program."; exit 1 ;;
            *) display_error "Invalid option. Exiting." && exit 1 ;;
        esac
        ! $IS_PRIVILEGED && display_info "Determining user privileges and sudo access." && check_privileges
        # Install dependencies for dotfiles to operate
        display_bar
        display_title "Installing dotfile dependencies"
        [[ $OPERATING_SYSTEM == 'Darwin' ]] && {
            install_brew
            install_brew_bash
            install_brew_coreutils
        }
        display_bar
        install_system_package "jq"
        display_bar
        install_system_package "stow"
        display_bar
        install_system_package "tmux"
        display_bar
        install_system_package "git"
        display_bar
    fi
    if [[ $CREATE_TMUX_SESSION == true ]];then
        # Load tmux
        ! tmux list-sessions &>/dev/null | grep "dotfiles" &>/dev/null && {
            display_title "Tmux: Starting new-session 'dotfiles'"
            tmux new-session -d -s dotfiles
        } || { tmux kill-session -t dotfiles; }
        prompt_user message="About to connect to tmux, are you ready? [Y/n]: " \
            failure_message="You were not ready, run with -t to skip tmux." \
            success_message="" error_message="" warning_message=""
        display_title "Tmux: Attaching to session 'dotfiles'"
        tmux send-keys "./dotfiles $verbose_arg $debug_arg -tsmp ${PROFILE_FILENAME}" Enter
        tmux attach-session -t dotfiles &>/dev/null
        display_warning "Tmux: Continuing execution in tmux session. Exiting."
        exit 0
    fi
    ! check_bash_version &&
    [[ $OPERATING_SYSTEM == "Darwin" ]] &&
    [[ $MAC_RESTART == true ]] && {
        # Restart bash shell to load 4.4+ bash
        display_warning "Restarting bash to upgrade to 4.4 features."
        ./dotfiles $verbose_arg $debug_arg -smp ${PROFILE_FILENAME}
        exit 0
    }
    # Loaded here because it requires bash 4.4+
    [[ -r "lib/lib-configs.sh" ]] && { source "lib/lib-configs.sh" || { 
            echo "DOTFILES: Failed to load lib-configs.sh, run with debug true for details"; exit 1; }
    } || {  echo "DOTFILES: Missing lib-configs.sh, run with debug true for details"; exit 1; }
    # Check if privileged. Needed incase we skipped all the code above due to flags.
    ! $IS_PRIVILEGED && display_info "Determining user privileges and sudo access." && check_privileges
    # Load the profile and display to user before continuing
    load_profile "$PROFILE_FILENAME"
    # Install and configure the profile to the system
    install_profile "$PROFILE_FILENAME"
    display_success "All done setting up the terminal. There might be manual actions to perform with your profile. You'll want to double check this."
    display_warning "Recommended: Start a new terminal instead of continuning from the installation one."
    $(which ${DOTFILES_PROFILE[SHELL]})
}
#========================================================
#   Main Execution
#========================================================
! check_bash_version && {
    # 4.3 or lower bash
    main "$@"
} || {
    # 4.4+ bash
    main "$@" | logfile "${DOTFILES_LOGS}/dotfiles_installation_logfile"
}